        //---------------------------------------------------------------------- *
        //This is the prototype for BlueSeries/IceBreak - JSON and XML parser
        //Use the JSONXML binddir when creating your program and include this
        //prototypes like:

        //H BNDDIR('JSONPARSER')
        ///include jsonParser

        //Or

        //H BNDDIR('XMLPARSER')
        ///include xmlParser

        //Note: Both XMLPARSER and JSONPARSER headers are autogenerated from
        //the JSONXML header. so please do not make any changes th there headerfi

        //Note: all binddirectories JSONPARSER, XMLPARSER and JSONXML is the same
        //---------------------------------------------------------------------- *
      /if defined( JX_DEF)
      /eof
      /endif
      /define  JX_DEF
        //---------------------------------------------------------------------- *
        //Before starting that parser - to enshure right enterpretations of delimi
        //Usage:
        //jx_setDelimiters( JX_DELIMITERS);
        //--------------------------------------------------------------------- *
        //get delimiter pointer
        Dcl-PR jx_getDelimiters Pointer extproc(*CWIDEN :'jx_GetDelimiters');
        End-PR;
        //Set delimiter used for locate expression
        Dcl-PR jx_setDelimiters  extproc(*CWIDEN :'jx_SetDelimiters2');
          //always: '/\@[] .{}' in your  local CCSID
          delimiterStr   Pointer    value options(*string);
        End-PR;

        Dcl-C JX_DELIMITERS const('/\@[] .{}''"');

        //---------------------------------------------------------------------- *
        //Type of a node:
        //---------------------------------------------------------------------- *
        Dcl-C JX_UNKNOWN const(0);
        Dcl-C JX_OBJECT  const(1);
        Dcl-C JX_ARRAY   const(2);
        Dcl-C JX_EVAL    const(3);
        Dcl-C JX_POINTER_VALUE const(4);
        Dcl-C JX_VALUE   const(5);
        Dcl-C JX_ROOT    const(6);
        Dcl-C JX_LITERAL const(16);
        Dcl-C JX_OBJLINK const(17);
        Dcl-C JX_OBJREPLACE const(18);
        Dcl-C JX_OBJCOPY const(18);
        Dcl-C JX_BY_CONTEXT const(19);
        Dcl-C JX_OBJMOVE const(2048);

        //* Modifiers to "add" / "or" into "parseString" and "evaluate"
        //!! Type - have to be backwards compat.
        //Unlink the source and move it to dest.
        Dcl-C JX_MOVE_MODES const(2048);
        //Allow strings ints and other values to
        Dcl-C JX_ALLOW_PRIMITIVES const(4096);

        //* Combinations:
        //JX_PARSE  = JX_EVAL + JX_MOVE_NODES
        Dcl-C JX_PARSE   const(2051);

        //Merge options:
        //Modifiers to "add" / "or" into "JSON_EVAL"
      /if not defined(MO_MERGE)
      /define  MO_MERGE
        //Only new elements are merged - existing
        //are left untouched
        Dcl-C MO_MERGE_NEW const(256);
        //Merge and replace only existing nodes.
        Dcl-C MO_MERGE_MATCH const(512);
        //Merge all: replace if it exists and
        //append new nodes if not exists
        Dcl-C MO_MERGE_REPLACE const(1024 );
      /endif

        Dcl-C JX_CHILD_LIST const('[0]');

        //---------------------------------------------------------------------- *
        //Returns node to the jx_object tree
        Dcl-PR jx_ParseFile Pointer extproc(*CWIDEN:'jx_ParseFile');
          //File to parse
          FileName       Pointer    value options(*string);
          //Parsing options
          Options        Pointer    value options(*string:*nopass);
        End-PR;

        //Returns node jx_object tree
        Dcl-PR jx_ParseString Pointer extproc(*CWIDEN:'jx_ParseString');
          //String to parse
          String         Pointer    value options(*string);
          //Parsing options
          Options        Pointer    value options(*string:*nopass);
        End-PR;

        //Returns node jx_object tree, ccsid of the string is given
        Dcl-PR  jx_ParseStringCcsid Pointer 
                extproc(*CWIDEN:'jx_parseStringCcsid');
          //String to parse
          String         Pointer    value options(*string);
          // The ccsid of the string
          ccsid          int(10) value;
        End-PR;

        //Set , or . for numeri decimal point
        Dcl-PR jx_setDecPoint  extproc(*CWIDEN : 'jx_SetDecPoint');
          //decimal point char
          decPoint       Pointer    value options(*string);
        End-PR;

        //Bool true if errors occures
        Dcl-PR jx_Error Ind extproc(*CWIDEN:'jx_Error');
          //jx_Object  node
          pNode          Pointer    value;
        End-PR;

        //Return error description
        Dcl-PR jx_Message Varchar(1024) extproc(*CWIDEN:'jx_Message');
          //jx_Object
          pNode          Pointer    value;
        End-PR;

        // Without parameters you will get the last internal error
        // Otherwise it will format an error object 
        Dcl-PR jx_GetMessageObject Pointer //Return error description
                                   extproc(*CWIDEN:'jx_GetMessageObject');
          MessageId      Pointer    value options(*string:*nopass);
          MessageData    Pointer    value options(*string:*nopass);
        End-PR;

        // simple courtesy function to return a {"success":true} object
        //Return success:true object
        Dcl-PR jx_SuccessTrue Pointer extproc(*CWIDEN:'jx_SuccessTrue');
          MessageId      Pointer    value options(*string:*nopass);
          MessageData    Pointer    value options(*string:*nopass);
        End-PR;

        //Returns pointer to node
        Dcl-PR jx_Locate Pointer extproc(*CWIDEN : 'jx_GetNode');
          //Pointer to tree or node
          pNode          Pointer    value;
          //location expression
          Expression     Pointer    value options(*string);
        End-PR;

        //Returns pointer to node
        Dcl-PR jx_LocateOrCreate Pointer 
                                 extproc(*CWIDEN : 'jx_GetOrCreateNode');
          //Pointer to tree or node
          pNode          Pointer    value;
          //location expression
          Expression     Pointer    value options(*string);
        End-PR;

        //Returns 'ON' if node exists
        Dcl-PR jx_Has Ind extproc(*CWIDEN : 'jx_Has');
          //Pointer to tree or node
          pNode          Pointer    value;
          //Path to node
          NodeName       Pointer    value options(*string);
        End-PR;

        //Returns 'ON' if node exists and has <> 0
        Dcl-PR jx_isTrue Ind extproc(*CWIDEN : 'jx_IsTrue');
          //Pointer to tree or node
          pNode          Pointer    value;
          //Path to node
          NodeName       Pointer    value options(*string);
        End-PR;

        //Returns 'ON' if node exists and has <> 0
        Dcl-PR jx_isNull Ind extproc(*CWIDEN : 'jx_IsNull');
          //Pointer to tree or node
          pNode          Pointer    value;
          //Path to node
          NodeName       Pointer    value options(*string);
        End-PR;

        //Returns 'ON' if it is a valid node
        Dcl-PR jx_isNode Ind extproc(*CWIDEN : 'jx_isNode');
          //a.k.a. false for strings
          pNode          Pointer    value;
        End-PR;

        //renames the node name
        Dcl-PR jx_NodeRename Ind extproc(*CWIDEN : 'jx_NodeRename');
          //Pointer to tree or node
          pNode          Pointer    value;
          //Path to node
          NodeName       Pointer    value options(*string);
        End-PR;

        //Returns pointer to next sibling (elem)
        Dcl-PR jx_GetNext Pointer extproc(*CWIDEN : 'jx_GetNodeNext');
          //Pointer to current node (elem)
          pNode          Pointer    value;
        End-PR;

        //Returns pointer to first child (elem)
        Dcl-PR jx_GetChild Pointer extproc(*CWIDEN : 'jx_GetNodeChild');
          //Pointer to current node (elem)
          pNode          Pointer    value;
        End-PR;

        //Returns pointer to parent node
        Dcl-PR jx_GetParent Pointer extproc(*CWIDEN : 'jx_GetNodeParent');
          //Pointer to current node (elem)
          pNode          Pointer    value;
        End-PR;

        // Create or replace a node with no value ( null value)
        Dcl-PR jx_SetNull Pointer extproc(*CWIDEN: 'jx_SetNullByName');
          //Pointer to jx_ tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
        End-PR;

        Dcl-PR jx_SetEval pointer extproc(*CWIDEN:'jx_SetEvalByName');
          pNode          Pointer    value;
          Expresion      Pointer    value options(*string);
          Value          Pointer    value options(*string);
        End-PR;

        Dcl-PR jx_SetStr Pointer extproc(*CWIDEN: 'jx_SetStrByName');
          //Pointer to jx_ tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
          //New value to set / pointer to object
          Value          Pointer    value options(*string);
        End-PR;

        Dcl-PR jx_SetInt Pointer extproc(*CWIDEN: 'jx_SetIntByName');
          //Pointer to jx_ tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
          //New value to set / pointer to object
          Value          Int(10)    value;
        End-PR;

        Dcl-PR jx_SetNum Pointer extproc(*CWIDEN: 'jx_SetDecByName');
          //Pointer to jx_ tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
          //New value to set / pointer to object
          Value          Packed(30:15) value;
        End-PR;

        Dcl-PR jx_SetBool Pointer extproc(*CWIDEN: 'jx_SetBoolByName');
          //Pointer to jx_ tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
          //New value to set / pointer to object
          Value          Ind        value;
        End-PR;

        Dcl-PR jx_SetDate Pointer extproc(*CWIDEN: 'jx_SetDateByName');
          //Pointer to jx_ tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
          //New value to set / pointer to object
          Value          date(*ISO)  const;
        End-PR;

        Dcl-PR jx_SetTime Pointer extproc(*CWIDEN: 'jx_SetTimeByName');
          //Pointer to jx_ tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
          //New value to set / pointer to object
          Value          time(*ISO)   const;
        End-PR;

        Dcl-PR jx_SetTimeStamp Pointer 
                               extproc(*CWIDEN: 'jx_SetTimeStampByName');
          //Pointer to jx_ tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
          //New value to set / pointer to object
          Value          timestamp  const;
        End-PR;


        Dcl-PR jx_SetPtr Pointer extproc(*CWIDEN: 'jx_SetPtrByName');
          //Pointer to jx_ tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
          //Pointer to anything - You do the cleanup
          Value          Pointer    value;
          //*ON=Pointer string and stringify, *OFF= Contents is already formated JSON (Default)
          Stringify      Ind        value options(*nopass);
        End-PR;

        Dcl-PR jx_SetProcPtr Pointer extproc(*CWIDEN: 'jx_SetPtrByName');
          pNode          Pointer    value; //Pointer to jx_ tree
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
          Proc           Pointer(*Proc); //Pointer to a procedure
          //*ON=String escape, *OFF=If literals
          isString       Ind        value options(*nopass);
        End-PR;

        //         /IF DEFINED(*V7R4M0)
        //           Dcl-PR jx_Set Pointer overload ( 
        //             jx_SetBool : 
        //             jx_SetNum : 
        //             jx_SetInt :             
        //             jx_SetDate:
        //             jx_SetTime:
        //             jx_SetTimeStamp:
        //             jx_SetStr
        //           );
        //         /ENDIF

        Dcl-PR jx_SetValue Pointer extproc(*CWIDEN: 'jx_SetValueByName');
          //Pointer to jx_ tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
          //New value to set / pointer to object
          Value          Pointer    value options(*string:*nopass);
          //Optional new type (Refer "node type"
          Type           Uns(5)     value options(*nopass);
        End-PR;

        Dcl-PR jx_GetValueStr Varchar(32767) 
                              extproc(*CWIDEN : 'jx_GetNodeValueVC');
          //Pointer to node
          pNode          Pointer    value;
          //If not found - default value
          Defaultvalue   Pointer    value options(*string:*nopass);
        End-PR;

        Dcl-PR jx_GetValueNum Packed(30:15) 
                              extproc(*CWIDEN : 'jx_GetNodeValueNum');
          //Pointer to node
          pNode          Pointer    value;
          //If not found - default value
          Defaultvalue   Packed(30:15) value options(*NOPASS);
        End-PR;

        Dcl-PR jx_GetValueInt Int(20) extproc(*CWIDEN : 'jx_GetNodeValueInt');
          pNode          Pointer    value; //Pointer to node
          //If not found - default value
          Defaultvalue   Int(20)    value options(*NOPASS);
        End-PR;

        Dcl-PR jx_GetValuePtr Pointer extproc(*CWIDEN : 'jx_GetNodeValuePtr');
          //Pointer to node
          pNode          Pointer    value;
          //If not found - default value
          Defaultvalue   Pointer    value options(*string:*nopass);
        End-PR;

        Dcl-PR jx_GetName Varchar(32767) 
                          extproc(*CWIDEN : 'jx_GetNodeNameVC');
          //Pointer to node
          pNode          Pointer    value;
        End-PR;

        Dcl-PR jx_GetNameAsPath Varchar(32767)
                                extproc(*CWIDEN : 'jx_GetNodeNameAsPath');
          //Pointer to node
          pNode          Pointer    value;
          //Delimiter like - or . or / or \
          Delimiter      Char(1)    value;
        End-PR;

        //* Refer to node type above
        Dcl-PR jx_NodeType Int(5) extproc(*CWIDEN : 'jx_GetNodeType');
          //Pointer to jx_ tree to receive format
          pNode          Pointer    value;
        End-PR;

      // Get string by expresion
      //  /object/array[123]/name
      //  .object.array[123].name
        Dcl-PR jx_GetStr Varchar(32767) extproc(*CWIDEN : 'jx_GetValueVC');
          //Pointer to relative node
          pNode          Pointer    value;
          //Locations expression to node
          Expression     Pointer    value options(*string:*nopass);
          //If not found - default value
          Defaultvalue   Pointer    value options(*string:*nopass);
        End-PR;

      //  will join all subsequent array nodes into one resulting string
        Dcl-PR jx_GetStrJoin Varchar(32767) 
                             extproc(*CWIDEN : 'jx_GetStrJoinVC');
          //Pointer to relative node
          pNode          Pointer    value;
          //Locations expression to node
          Expression     Pointer    value options(*string:*nopass);
          //If not found - default value
          Defaultvalue   Pointer    value options(*string:*nopass);
        End-PR;

      // Get number by expresion like:
      //  /object/array[123]/name
      //  .object.array[123].name
        Dcl-PR jx_GetNum Packed(30:15) extproc(*CWIDEN : 'jx_GetValueNum');
          //Pointer to relative node
          pNode          Pointer    value;
          //Locations expression to node
          Expression     Pointer    value options(*string:*nopass);
          //If not found - default value
          Defaultvalue   Packed(30:15) value options(*nopass);
        End-PR;

        Dcl-PR jx_GetInt Int(20) extproc(*CWIDEN : 'jx_GetValueInt');
          //Pointer to relative node
          pNode          Pointer    value;
          //Locations expression to node
          Expression     Pointer    value options(*string:*nopass);
          //If not found - default value
          Defaultvalue   Int(20)    value options(*nopass);
        End-PR;

        Dcl-PR jx_GetBool ind extproc(*CWIDEN : 'jx_GetValueBool');
          //Pointer to relative node
          pNode          Pointer    value;
          //Locations expression to node
          Expression     Pointer    value options(*string:*nopass);
          //If not found - default value
          Defaultvalue   ind        value options(*nopass);
        End-PR;

        Dcl-PR jx_GetDate date(*ISO)  extproc(*CWIDEN : 'jx_GetValueDate');
          //Pointer to relative node
          pNode          Pointer    value;
          //Locations expression to node
          Expression     Pointer    value options(*string:*nopass);
          //If not found - default value
          Defaultvalue   date(*ISO)    value options(*nopass);
        End-PR;

        Dcl-PR jx_GetTime Time(*ISO)  extproc(*CWIDEN : 'jx_GetValueTime');
          //Pointer to relative node
          pNode          Pointer    value;
          //Locations expression to node
          Expression     Pointer    value options(*string:*nopass);
          //If not found - default value
          Defaultvalue   Time(*ISO)    value options(*nopass);
        End-PR;

        Dcl-PR jx_GetTimeStamp TimeStamp  
                               extproc(*CWIDEN : 'jx_GetValueTimeStamp');
          //Pointer to relative node
          pNode          Pointer    value;
          //Locations expression to node
          Expression     Pointer    value options(*string:*nopass);
          //If not found - default value
          Defaultvalue   TimeStamp    value options(*nopass);
        End-PR;
        //Set an ILOB object to a value found by X
        //Return *ON if found
        Dcl-PR jx_GetIlobValue Ind extproc(*CWIDEN :'ILOB_XmlGetValue');
          //Pointer to ILOB object to receive the va
          pIlob          Pointer    value;
          //Pointer to tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expression     Pointer    value options(*string);
        End-PR;

        Dcl-PR jx_CopyValue Pointer extproc(*CWIDEN : 'jx_CopyValue');
          //destination node
          pDest          Pointer    value;
          //destiantion name (or *NULL or '')
          destName       Pointer    value options(*string);
          //source node
          pSource        Pointer    value;
          //source name (or *NULL or '')
          sourceName     Pointer    value options(*string);
        End-PR;

        Dcl-PR jx_NodeCopy extproc(*CWIDEN : 'jx_NodeCopy');
          //node. Retrive from Locate()
          pRootNode      Pointer    value;
          //node. Retrive from Locate()
          pNewChild      Pointer    value;
          //Reference location to where it arrive
          RefLocation    Int(10)    value;
        End-PR;

        //Following constants used by jx_NodeCopy:RefLocation
        Dcl-C JX_FIRST_CHILD const(1);
        Dcl-C JX_LAST_CHILD const(2);
        Dcl-C JX_BEFORE_SIBLING const(3);
        Dcl-C JX_AFTER_SIBLING const(4);

        Dcl-PR jx_NodeClone Pointer extproc(*CWIDEN : 'jx_NodeClone');
          //node. Retrive from Locate()
          pSource        Pointer    value;
        End-PR;

        //returns the new node
        Dcl-PR jx_NodeAdd Pointer extproc(*CWIDEN : 'jx_NodeAdd');
          //node. Retrive from Locate()
          pRootNode      Pointer    value;
          //Reference location to where it arrive
          RefLocation    Int(10)    value;
          //Name of node
          Name           Pointer    value options(*string);
          //Value or expression
          Value          Pointer    value options(*string);
          //New type (Refer "node type"
          Type           Uns(5)     value;
        End-PR;

        Dcl-PR jx_NodeDelete extproc(*CWIDEN : 'jx_NodeDelete');
          //node. Retrive from Locate()
          pRootNode      Pointer    value;
        End-PR;

        //Unlink the note from its previous and promote it as a new root node
        Dcl-PR jx_NodeUnlink Pointer extproc(*CWIDEN : 'jx_NodeUnlink');
          //Targenode. Retrive from Locate(
          pNode          Pointer    value;
        End-PR;

        Dcl-PR jx_NodeSanitize extproc(*CWIDEN : 'jx_NodeSanitize');
          //node. Retrive from Locate()
          pRootNode      Pointer    value;
        End-PR;

        //CheckSum of all names and values
        //Delete all nodes which value are null
        Dcl-PR jx_NodeCheckSum Uns(10) extproc(*CWIDEN : 'jx_NodeCheckSum');
          pRootNode      Pointer    value; //node. Retrive from Locate()
        End-PR;
     
        //returns the new node
        Dcl-PR jx_NewObject Pointer extproc(*CWIDEN : 'jx_NewObject');
          //Destination. Retrive from Locate()
          pDestNode      Pointer    value options(*nopass);
        End-PR;

      // Array functions
        //returns the new node
        Dcl-PR jx_NewArray Pointer extproc(*CWIDEN : 'jx_NewArray');
          //Destination. Retrive from Locate()
          pDestNode      Pointer    value options(*nopass);
        End-PR;

        //returns the new node added to the end of
        Dcl-PR jx_ArrayPush Pointer extproc(*CWIDEN : 'jx_ArrayPush');
          //Destination. Retrive from Locate()
          pDestArray     Pointer    value;
          //source node to append
          pSourceNode    Pointer    value options(*string);
          //0=(Dft) Unlink and move, 1=copy a clone
          copy           Uns(5)     value options(*nopass);
        End-PR;

        //Following constants used by jx_ArrayPush:copy
        Dcl-C JX_MOVE_UNLINK const(0);
        Dcl-C JX_COPY_CLONE const(1);

        //returns the new node added to the end of
        Dcl-PR jx_ArrayAppend Pointer extproc(*CWIDEN :'jx_ArrayAppend');
          //Destination. Retrive from Locate()
          pDestArray     Pointer    value;
          //source node to append
          pSourceNode    Pointer    value options(*string);
          //0=(Dft) Unlink and move, 1=copy a clone
          copy           Uns(5)     value options(*nopass); 
        End-PR;

        //returns the new array fro source array
        Dcl-PR jx_ArraySlice Pointer extproc(*CWIDEN : 'jx_ArraySlice' );
          //source node or array string
          pSourceNode    Pointer    value options(*string);
          //From entry ( 1=First)
          from           Int(10)    value;
          //To and includ   (-1 = Until end)
          to             Int(10)    value;
          //0=(Dft) Unlink and move, 1=copy a clone
          copy           Uns(5)     value options(*nopass);
        End-PR;
     
        //returns the new node added to the end of
        Dcl-PR jx_ArraySort Pointer extproc(*CWIDEN : 'jx_ArraySort');
          //Destination. Retrive from Locate()
          pArray         Pointer    value;
          //nodenames if any in subobject to comapre
          pkeyNames      Pointer    value options(*string) ;
          //0=(Dft) use json numerics, 1=Use locale
          options        uns(5)     value options(*nopass);
        End-PR;

        Dcl-C jx_USE_LOCALE const(1);
        
        //returns the first node with expr value
        Dcl-PR jx_LookupValue Pointer extproc(*CWIDEN : 'jx_lookupValue');
          //Array/ obj to search
          pArray         Pointer    value;
          //What to search for
          expr           Pointer    value options(*string);
          //0=(Dft) Same case, 1=ignore case
          ignoreCase     Uns(5)     value options(*nopass);
        End-PR;

        //Following constants used by jx_LookupValue:ignoreCase
        Dcl-C JX_SAME_CASE const(0);
        Dcl-C JX_IGNORE_CASE const(1);

        //returns numer of element in array or obj
        Dcl-PR jx_GetLength Int(10) extproc(*CWIDEN : 'jx_getLength'  );
          //Array to count length
          pArray         Pointer    value;
        End-PR;

        //returns the new node
        Dcl-PR jx_Merge Pointer extproc(*CWIDEN : 'jx_NodeMerge');
          //Destination. Retrive from Locate()
          pDestNode      Pointer    value;
          //Source tree  Retrive from Locate()
          pSourceNode    Pointer    value;
          //Optional new type
          Type           Uns(5)     value options(*nopass);
        End-PR;

        //Following constants used by jx_Merge:Type
        Dcl-C JX_DONTREPLACE const(0);
        Dcl-C JX_REPLACE const(1);

        //returns the new node
        Dcl-PR jx_MergeObjects Pointer extproc(*CWIDEN : 'jx_MergeObjects');
          //Destination. Retrive from Locate()
          pDestObj       Pointer    value;
          //Source tree  Retrive from Locate()
          pSourceObj     Pointer    value;
          //JX_DONTREPLACE or JX_OBJREPLACE
          Type           Uns(5)     value;
        End-PR;

        //returns the source node
        Dcl-PR jx_MoveObjectInto Pointer extproc(*CWIDEN : 'jx_NodeMoveInto');
          //Destination. Retrive from Locate()
          pDestObj       Pointer    value;
          Name           Pointer    value options(*string);
          //Source tree  Retrive from Locate()
          pSourceObj     Pointer    value;
        End-PR;

        Dcl-PR jx_Dump  extproc(*CWIDEN : 'jx_Dump');
          //Pointer to tree
          pNode          Pointer    value;
        End-PR;


        Dcl-PR jx_CloneFormat  extproc(*CWIDEN : 'jx_CloneFormat');
          //Pointer to tree to receive format
          pNode          Pointer    value;
          //node ptr or path with right formating
          pCloneFrom     Pointer    value options(*string);
        End-PR;

        //**  JSON renderes ***
        Dcl-PR jx_WriteJsonStmf  extproc(*CWIDEN : 'jx_WriteJsonStmf');
          //node. Retrive from Locate()
          pNode          Pointer    value;
          //Name of output stream file
          FileName       Pointer    value options(*string);
          //Ccsid of output file
          Ccsid          Int(10)    value;
          Trim           Ind        value;
          //Extra options
          Options        Pointer    value options(*string:*nopass);
        End-PR;

        Dcl-PR jx_AsJsonText Varchar(32767) 
                             extproc(*CWIDEN : 'jx_AsJsonText');
          //node. Retrive from Locate()
          pNode          Pointer    value;
        End-PR;

        Dcl-PR jx_AsJsonTextMem Uns(10) 
                                extproc(*CWIDEN : 'jx_AsJsonTextMem');
          //node. Retrive from Locate()
          pNode          Pointer    value;
          //pointer to any memory buffer
          pBuffer        Pointer    value;
          //Max number of bytes in buffer %size()
          maxSize        Uns(10)    value options(*nopass);
        End-PR;

        //**  XML  renderes ***
        Dcl-PR jx_WriteXmlStmf  extproc(*CWIDEN : 'jx_WriteXmlStmf');
          //node. Retrive from Locate()
          pNode          Pointer    value;
          //Name of output stream file
          FileName       Pointer    value options(*string);
          //Ccsid of output file
          Ccsid          Int(10)    value;
          Trim           Ind        value;
          //Extra options
          Options        Pointer    value options(*string:*nopass);
        End-PR;

        Dcl-PR jx_AsXmlText Varchar(32767) extproc(*CWIDEN : 'jx_AsXmlText');
          //node. Retrive from Locate()
          pNode          Pointer    value;
        End-PR;

        Dcl-PR jx_AsXmlTextMem Uns(10) extproc(*CWIDEN : 'jx_AsXmlTextMem');
          //node. Retrive from Locate()
          pNode          Pointer    value;
          //pointer to any memory buffer
          pBuffer        Pointer    value;
        End-PR;

        // Return a streamer object to be used in own serialisers 
        Dcl-PR jx_Stream pointer extproc(*CWIDEN : 'jx_Stream');
          //node. Retrive from Locate()
          pNode          Pointer    value;
        End-PR;

        //**  CSV  renderes ***
        Dcl-PR jx_WriteCsvStmf  extproc(*CWIDEN : 'jx_WriteCsvStmf');
          //node. Retrive from Locate()
          pNode          Pointer    value;
          //Name of output stream file
          FileName       Pointer    value options(*string);
          //Ccsid of output file
          Ccsid          Int(10)    value;
          //*ON=Remove inter blanks
          Trim           Ind        value;
          //Options: ';.' for separator and dec
          Options        Pointer    value options(*string:*nopass);
        End-PR;


        Dcl-DS jx_DelimiterDS  based(prototype_only) qualified;
          Slash          Char(1);
          BackSlash      Char(1);
          Masterspace    Char(1);
          BraBeg         Char(1);
          BraEnd         Char(1);
          Blank          Char(1);
          Dot            Char(1);
          CurBeg         Char(1);
          CurEnd         Char(1);
          Apos           Char(1);
          Quot           Char(1);
        End-DS;

        //Iterators: First use the set the use forEach
        Dcl-DS jx_Iterator  based(prototype_only) qualified;
          root           Pointer;
          this           Pointer;
          isList         Ind;
          isFirst        Ind;
          isLast         Ind;
          isRecursive    Ind;
          comma          Varchar(1);
          count          Int(10);
          length         Int(10);
          size           Int(10);
          //Pointer to temp array of elms
          listArr        Pointer;
          //Set  this to *ON to teminate loop
          break          Ind;
          filler         Char(64);
        End-DS;

        Dcl-PR jx_setIterator  likeds( jx_Iterator) 
                               extproc(*CWIDEN : 'jx_SetIterator');
          //node. Retrive from Locate()
          pNode          Pointer    value;
          //Optional - path to node
          path           Pointer    value options(*string:*nopass);
        End-PR;

        Dcl-PR jx_setRecursiveIterator  likeds( jx_Iterator) 
                                        extproc(*CWIDEN : 
                                        'jx_SetRecursiveIterator');
          //node. Retrive from Locate()
          pNode          Pointer    value;
          //Optional - path to node
          path           Pointer    value options(*string:*nopass);
        End-PR;

        //Iterator Structure
        Dcl-PR jx_forEach Ind extproc(*CWIDEN : 'jx_ForEach');
          iterator                  likeds( jx_Iterator);
        End-PR;

        //For XML attributes
        Dcl-PR jx_GetNodeAttrValue Varchar(32767) 
                                   extproc(*CWIDEN : 'jx_GetNodeAttrValueVC');
          //Pointer to exsiting element
          pNode          Pointer    value;
          //Attribute Name
          AttrName       Pointer    value options(*string);
          //If not found - default value
          Defaultvalue   Pointer    value options(*string:*nopass);
        End-PR;

        Dcl-PR jx_SetNodeAttrValue extproc(*CWIDEN : 'jx_SetNodeAttrValue');
          //Pointer to exsiting element
          pNode          Pointer    value;
          //Attribute name
          AttrName       Pointer    value options(*string);
          //New value
          Value          Pointer    value options(*string);
        End-PR;

        Dcl-PR jx_GetAttrValue Varchar(32767) 
                               extproc(*CWIDEN : 'jx_GetAttrValueVC');
          //Pointer Attribute
          pAttr          Pointer    value;
          //If not found - default value
          Defaultvalue   Pointer    value options(*string:*nopass);
        End-PR;

        Dcl-PR jx_SetAttrValue extproc(*CWIDEN : 'jx_SetNodeAttrValue');
          //Pointer Attribute
          pAttr          Pointer    value;
          //New value
          AttrName       Pointer    value options(*string);
          //Default value
          Value          Pointer    value options(*string);
        End-PR;

        //Returns pointer to attribute list
        Dcl-PR jx_GetAttrFirst Pointer extproc(*CWIDEN : 'jx_GetAttrFirst');
          //Pointer to element
          pElem          Pointer    value;
        End-PR;

        //Returns pointer to attribute list
        Dcl-PR jx_GetAttrNext Pointer extproc(*CWIDEN : 'jx_GetAttrNext');
          //Pointer to attribute list
          pAttr          Pointer    value;
        End-PR;

        Dcl-PR jx_GetAttrName Varchar(32767) 
                              extproc(*CWIDEN : 'jx_GetAttrNameVC');
          //Pointer to attribute list
          pAttr          Pointer    value;
        End-PR;

      // Clear the contents of an array or object / delete all children
        Dcl-PR jx_Clear  extproc(*CWIDEN : 'jx_Clear');
          pNode          Pointer    value; //Pointer to tree node
        End-PR;

      // Close all nodes in this tree - also parent and siblings
        Dcl-PR jx_Close  extproc(*CWIDEN : 'jx_Close');
          //Pointer to tree node
          pNode          Pointer  ;
        End-PR;
      // Detect if you have a memry leak: call this when you have closed everything at i will return false
        Dcl-PR jx_MemLeak Ind extproc(*CWIDEN : 'jx_MemLeak');
        End-PR;

      // Print memory report
        Dcl-PR jx_MemStat  extproc(*CWIDEN : 'jx_MemStat');
        End-PR;

      // retune number of bytest used
        Dcl-PR jx_MemUse Uns(20) extproc(*CWIDEN : 'jx_MemUse');
        End-PR;

      // Return a memory segment pointer, and build a scope where JSON/XML will be created
        Dcl-PR jx_SegmentSelectNo Pointer 
                                  extproc(*CWIDEN : 'jx_SegmentSelectNo');
          SegmentIndex   Int(10)    value;
        End-PR;

      //  Delete the segment and all JSON/XML nodes build while segment scope was active
        Dcl-PR jx_SegmentDispose  extproc(*CWIDEN : 'jx_SegmentDispose');
          segmentPtr     Pointer    value;
        End-PR;

      // Maintain at list of index numbers to database CLOB/BLOB fields since pointers can not be shared in SQL
        //Returns *ON if found
        Dcl-PR jx_mapIx Ind extproc(*CWIDEN:'jx_MapIx' );
          //pointer to node pointer
          ppNode         Pointer;
          //index of pointer
          Index          Uns(10)    value;
        End-PR;

        //------------------------------------------------------------------------
        //SQL interface:
        //Note: When SQL functions returns *NULL, then use  the jx_Message() to re
        //------------------------------------------------------------------------

      // If options need - then it has to be first call made.
      // NOTE: If a pConnection pointer is provided, it will be updated with the conection
        Dcl-PR jx_sqlSetOptions  extproc(*CWIDEN: 'jx_sqlSetOptions');
          //json object with options ( see sample)
          parms          Pointer    value options(*string:*nopass);
        End-PR;

      // returns a object node with one resulting row for the SQL statment
        //Returns one SQL row as jx Obejct
        Dcl-PR jx_sqlResultRow Pointer extproc(*CWIDEN: 'jx_sqlResultRow');
          //SQL statement to run
          sqlStmt        Pointer    value options(*string);
          //json object template
          parms          Pointer    value options(*string:*nopass);
        End-PR;

      // returns an array (or object with array) of resulting rows for the SQL statment
        //Returns SQL rows as jx Obejct
        Dcl-PR jx_sqlResultSet Pointer extproc(*CWIDEN: 'jx_sqlResultSet');
          //SQL statement to run
          sqlStmt        Pointer    value options(*string);
          //From row; 1=First
          start          Int(10)    value options(*nopass);
          //max number of rows; JX_ALLROWS=all
          limit          Int(10)    value options(*nopass);
          //resultset format:
          format         Int(10)    value options(*nopass);
          //json object template
          parms          Pointer    value options(*string:*nopass);
        End-PR;

       
        Dcl-C JX_ALLROWS const(-1);

        //Following constants used by jx_sqlResultSet:format
        //+ An array with each row as an object
        Dcl-C JX_ROWARRAY const(0);
        //+ Metaobject: rows, fields
        Dcl-C JX_META    const(1);
        //+ Columns info
        Dcl-C JX_FIELDS  const(2);
        //+ Count all rows in the resultset
        // ( Pricy so awoid it !! )
        Dcl-C JX_TOTALROWS const(4);
        //+ Uppercase column names
        Dcl-C JX_UPPERCASE const(8);

        //+ Appoximate number of rows..
        //  ( unpresise but cheap !! prefered  )
        Dcl-C JX_APPROXIMATE_TOTALROWS const(16); 
     


      // SQL cursor processing
        //Returns handle to sql statement
        Dcl-PR jx_sqlOpen Pointer extproc(*CWIDEN:'jx_sqlOpen'  );
          //SQL statement to run
          sqlStmt        Pointer    value options(*string);
          //json object template
          parms          Pointer    value options(*string:*nopass);
        End-PR;

      // Fetch next from from that open sql handle, starting from rowNumer. 1=First row
        //Returns a row object (or *NULL if EOF)
        Dcl-PR jx_sqlFetchRelative Pointer 
                                   extproc(*CWIDEN: 'jx_sqlFetchRelative');
          //sql statement handle ( from sqlOpen)
          pSqlHndl       Pointer    value;
          //row from where to start 1=First
          fromRow        Int(10)    value;
        End-PR;

      // Fetch next from from that open sql handle
        //Returns a row object (or *NULL if EOF)
        Dcl-PR jx_sqlFetchNext Pointer extproc(*CWIDEN:'jx_sqlFetchNext');
          //sql statement handle ( from sqlOpen)
          pSqlHndl       Pointer    value;
        End-PR;

      // Number of columns in result set ( -1 if error)
        //Returns number of columns
        Dcl-PR jx_sqlColumns Int(10) extproc(*CWIDEN:'jx_sqlColumns');
          //sql statement handle ( from sqlOpen)
          pSqlHndl       Pointer    value;
        End-PR;

      // Number of rows  in result set ( -1 if error)
      // Note: This will run a hidden "select count(*)" which might be a little pricy
        //Returns number of rows
        Dcl-PR jx_sqlRows Int(10) extproc(*CWIDEN:'jx_sqlRows');
          //sql statement handle ( from sqlOpen)
          pSqlHndl       Pointer    value;
        End-PR;

      // Always colse the cursor after use, to release resources
        Dcl-PR jx_sqlClose  extproc(*CWIDEN:'jx_sqlClose');
          //sql statement handle ( from sqlOpen)
          pSqlHndl       Pointer;
        End-PR;

      // Execute any SQL statement not involving a cursor
        //Returns *ON if error
        Dcl-PR jx_sqlExec Ind extproc(*CWIDEN:'jx_sqlExec'  );
          //SQL statement to run (template)
          sqlStmt        Pointer    value options(*string);
          //json object template data
          parms          Pointer    value options(*string:*nopass);
        End-PR;

      // Execute an update table where the row is defined as a json object
        //Returns *ON if error
        Dcl-PR jx_sqlUpdate Ind extproc(*CWIDEN:'jx_sqlUpdate');
          //table name
          table          Pointer    value options(*string);
          //json object: {a:123,b:"value"}
          row            Pointer    value options(*string);
          //where clause : 'where myKey=$key'
          where          Pointer    value options(*string:*nopass);
          //where parameters: { key:777}
          whereParms     Pointer    value options(*string:*nopass);
        End-PR;

        //Returns *ON if error
        Dcl-PR jx_sqlInsert Ind extproc(*CWIDEN:'jx_sqlInsert');
          //table name
          table          Pointer    value options(*string);
          //json object: {a:123,b:"value"}
          row            Pointer    value options(*string);
          //extra parms
          parms          Pointer    value options(*string:*nopass);
        End-PR;

        //Returns *ON if error
        Dcl-PR jx_sqlUpsert Ind extproc(*CWIDEN:'jx_sqlUpsert');
          //table name
          table          Pointer    value options(*string);
          //json object: {a:123,b:"value"}
          row            Pointer    value options(*string);
          //where clause : 'where myKey=$key'
          where          Pointer    value options(*string:*nopass);
          //where parameters: { key:777}
          whereParms     Pointer    value options(*string:*nopass);
        End-PR;

        //Returns id of last insert
        Dcl-PR jx_sqlGetInsertId Int(10) extproc(*CWIDEN:'jx_sqlGetInsertId');
        End-PR;

        //Returns array of column info
        Dcl-PR jx_sqlGetMeta Pointer extproc(*CWIDEN:'jx_sqlGetMeta');
          sqlstmt        Pointer    value options(*string);
        End-PR;

      // Return pointer to database connection. No options => will be default local database
        Dcl-PR jx_sqlConnect Pointer extproc(*CWIDEN: 'jx_sqlConnect');
          //json object or string with options
          parms          Pointer    value options(*string:*nopass);
        End-PR;

      // Return pointer to database connection. No options => will be default local database
        Dcl-PR jx_sqlDisconnect  extproc(*CWIDEN: 'jx_sqlDisconnect');
        End-PR;

      // Return sql code for previous statement
        Dcl-PR jx_sqlCode Int(10) extproc(*CWIDEN: 'jx_sqlCode');
        End-PR;

      //Returns a JSON object from a REST call
        Dcl-PR jx_httpRequest Pointer extproc(*CWIDEN:'jx_httpRequest');
          //Full URL to the resource
          url            Pointer    value options(*string);
          //json object or string
          pReqNode       Pointer    value options(*string:*nopass);
          //extra CURL options
          options        Pointer    value options(*string:*nopass); 
        End-PR;

      // when the dataarea SQLTRACE is set, your SQL statements 
      // are logged into SQLTRACE table.
      // you can supply an extr eye-catch wariable :trcid
        Dcl-PR jx_traceSetId  extproc(*CWIDEN : 'jx_traceSetId');
          traceId        Int(20)    value; //Ccsid of inpur file
        End-PR;

      // courtesy joblog tool
        Dcl-PR jx_joblog  extproc(*CWIDEN : 'jx_joblog'); 
          //Format string 
          msg            Pointer    value options(*string);
        End-PR;

      // --------------------------------------------------------------------------------------------------------------
      // Depricated and renamed functions :
      // --------------------------------------------------------------------------------------------------------------
      // Depricated - use  jx_GetValueStr
        Dcl-PR jx_GetValue Varchar(32767) extproc(*CWIDEN : 'jx_GetValueVC');
          //Pointer to node
          pNode          Pointer    value;
          //If not found - default value
          Expression     Pointer    value options(*string:*nopass);
          //If not found - default value
          Defaultvalue   Pointer    value options(*string:*nopass);
        End-PR;

      // Depricated - use  jx_NodeCopy
        Dcl-PR jx_Copy extproc(*CWIDEN : 'jx_NodeCopy');
          //element. Retrive from Locate()
          pRootNode      Pointer    value;
          //element. Retrive from Locate()
          pNewChild      Pointer    value;
          //Reference location to where it arrive
          RefLocation    Int(10)    value;
        End-PR;

        Dcl-PR jx_ElementCopy extproc(*CWIDEN : 'jx_NodeCopy');
          //element. Retrive from Locate()
          pRootNode      Pointer    value;
          //element. Retrive from Locate()
          pNewChild      Pointer    value;
          //Reference location to where it arrive
          RefLocation    Int(10)    value;
        End-PR;

      // Depricated - use  jx_NodeDelete
        Dcl-PR jx_Delete extproc(*CWIDEN : 'jx_NodeDelete');
          //element. Retrive from Locate()
          pRootNode      Pointer    value;
        End-PR;

      // Depricated - use  jx_NodeDelete
        Dcl-PR jx_ElementDelete extproc(*CWIDEN : 'jx_NodeDelete');
          //element. Retrive from Locate()
          pRootNode      Pointer    value;
        End-PR;

      // Depricated - use  jx_AsJsonText
        Dcl-PR jx_AsText Varchar(32767) extproc(*CWIDEN : 'jx_AsJsonText');
          //element. Retrive from Locate()
          pNode          Pointer    value;
        End-PR;


      // jx_XpathValue   is depricated and replaced by: jx_GetStr
        Dcl-PR jx_XpathValue Varchar(32767)
                             extproc(*CWIDEN : 'jx_GetValueVC');
          //Pointer to tree
          pNode          Pointer    value;
          //Locations expression to node
          Expression     Pointer    value options(*string);
          //If not found - default value
          Defaultvalue   Pointer    value options(*string:*nopass);
        End-PR;

      // jx_XpathValueNum   is depricated and replaced by: jx_GetNum
        Dcl-PR jx_XpathValueNum Packed(30:15) 
                                extproc(*CWIDEN : 'jx_GetValueNum');
          //Pointer to tree
          pJsonCom       Pointer    value;
          //Location expression to node or attributes
          Node           Pointer    value options(*string);
          //If not found - default value
          Defaultvalue   Packed(30:15) value options(*nopass);
        End-PR;

      // Use - jx_NodeType
        Dcl-PR jx_ElementType Int(5) extproc(*CWIDEN : 'jx_GetNodeType');
          //Pointer to tree to receive format
          pNode          Pointer    value;
        End-PR;

      // Use jx_NodeAdd
        //returns the new element
        Dcl-PR jx_ElementAdd Pointer extproc(*CWIDEN : 'jx_NodeAdd');
          //element. Retrive from Locate()
          pRootNode      Pointer    value;
          //Reference location to where it arrive
          RefLocation    Int(10)    value;
          //Name of element
          Name           Pointer    value options(*string);
          //Value of element
          Value          Pointer    value options(*string);
        End-PR;

      // Use jx_GetNext
        //Returns pointer to next sibling (elem)
        Dcl-PR jx_GetElemNext Pointer extproc(*CWIDEN : 'jx_GetNodeNext');
          //Pointer to current element (elem)
          pElem          Pointer    value  ;
        End-PR;

      // use jx_GetChild
        //Returns pointer to next child (elem)
        Dcl-PR jx_GetElemChild Pointer extproc(*CWIDEN : 'jx_GetNodeChild');
          //Pointer to current element (elem)
          pElem          Pointer    value;
        End-PR;


      // use get jx_GetName
        Dcl-PR jx_getElemName Varchar(32767) 
                              extproc(*CWIDEN : 'jx_GetNodeNameVC');
          //Pointer to node
          pNode          Pointer    value;
        End-PR;

      // use xml_GetValueStr
        Dcl-PR jx_GetElemValue Varchar(32767) 
                               extproc(*CWIDEN : 'jx_GetNodeValueVC');
          //Pointer to element
          pElem          Pointer    value;
          //If not found - default value
          Defaultvalue   Pointer    value options(*string:*nopass);
        End-PR;

       // use jx_GetAttrValue
        Dcl-PR jx_GetAttr Varchar(32767) 
                          extproc(*CWIDEN : 'jx_GetNodeAttrValueVC');
          //Pointer to element
          pNode          Pointer    value;
          //Attribute Name
          AttrName       Pointer    value options(*string);
          //If not found - default value
          Defaultvalue   Pointer    value options(*string:*nopass);
        End-PR;

      // has no effect any longer
        //Set input and output CCSID
        Dcl-PR jx_setCcsid  extproc(*CWIDEN : 'jx_SetCcsid');
          //Ccsid of inpur file
          inputCCSID     Int(10)    value;
          //Ccsid of output file
          outputCCSID    Int(10)    value;
        End-PR;

      // depricated - use setNum
        Dcl-PR jx_SetDec Pointer extproc(*CWIDEN: 'jx_SetDecByName');
          //Pointer to jx_ tree
          pNode          Pointer    value;
          //Location expression to node or attributes
          Expresion      Pointer    value options(*string);
          //New value to set / pointer to object
          Value          Packed(30:15) value;
        End-PR;

      // Depricated in both JSON and XML - use  jx_WriteJsonStmf /   jx_WriteXmlStmf
      /if not defined(JSONXML_DEPRICATED)
      /define  JSONXML_DEPRICATED
        Dcl-PR json_WriteStmf  extproc(*CWIDEN : 'jx_WriteJsonStmf');
          //element. Retrive from Locate()
          pNode          Pointer    value;
          //Name of output stream file
          FileName       Pointer    value options(*string);
          //Ccsid of output file
          Ccsid          Int(10)    value;
          Trim           Ind        value options(*nopass);
        End-PR;

        Dcl-PR xml_WriteStmf  extproc(*CWIDEN : 'jx_WriteXmlStmf');
          //element. Retrive from Locate()
          pNode          Pointer    value;
          //Name of output stream file
          FileName       Pointer    value options(*string);
          //Ccsid of output file
          Ccsid          Int(10)    value;
          Trim           Ind        value options(*nopass);
        End-PR;
      /endif
